max(predict(trialCART,newdata=test)[,2])
max(predict(trialCART)[,2])
max(predict(trialCART,test)[,2])
max(predict(trialCART,newdata=test)[,2])
pred = predict(trialCART,newdata=test,type='class')
table(pred,test$trial)
accu = (tbl[1,1]+tbl[2,2])/sum(tbl)
tbl=table(pred,test$trial)
accu = (tbl[1,1]+tbl[2,2])/sum(tbl)
accu
sens = (tbl[1,1]+tbl[2,1])/sum(tbl)
sens = tbl[1,1]/(tbl[1,1]+tbl[2,1])
spec = tbl[2,2]/(tbl[2,1]+tbl[2,2])
accu
sens
spec
pred = predict(trialCART,newdata=train,type='class')
tbl=table(pred,test$trial)
accu = (tbl[1,1]+tbl[2,2])/sum(tbl)
sens = tbl[1,1]/(tbl[1,1]+tbl[2,1])
spec = tbl[2,2]/(tbl[2,1]+tbl[2,2])
accu
tbl=table(pred,train$trial)
pred = predict(trialCART,newdata=train,type='class')
tbl=table(pred,train$trial)
accu = (tbl[1,1]+tbl[2,2])/sum(tbl)
sens = tbl[1,1]/(tbl[1,1]+tbl[2,1])
spec = tbl[2,2]/(tbl[2,1]+tbl[2,2])
accu
sens
spec
sens = tbl[1,1]/(tbl[1,1]+tbl[1,2])
spec = tbl[2,2]/(tbl[1,2]+tbl[2,2])
sens
spec
tbl
table(train$trial)
631+99
631/730
441/572
table(pred)
pred = predict(trialCART,type='class')
tbl=table(pred,train$trial)
accu = (tbl[1,1]+tbl[2,2])/sum(tbl)
sens = tbl[1,1]/(tbl[1,1]+tbl[1,2])
spec = tbl[2,2]/(tbl[1,2]+tbl[2,2])
tbl
631+99
table(train$trial)
pred = predict(trialCART)[,2]>0.5
tbl=table(pred,train$trial)
accu = (tbl[1,1]+tbl[2,2])/sum(tbl)
sens = tbl[1,1]/(tbl[1,1]+tbl[1,2])
spec = tbl[2,2]/(tbl[1,2]+tbl[2,2])
tbl
source('~/.active-rstudio-document')
441/(441+131)
631/(631+99)
sens = tbl[2,2]/(tbl[1,2]+tbl[2,2])
spec = tbl[1,1]/(tbl[1,1]+tbl[2,1])
sens
spec
predtest = predict(trialCART,newdata=test)[,2]>0.5
table(predtest,test$trial)
(261+162)/ nrow(test$trial)
(261+162)/ nrow(test)
table(predtest>0.5,test$trial)
pd = prediction(predtest,test$trial)
pd = prediction(predtest)
pd = prediction(predtest,test$trial)
predtest = predict(trialCART,newdata=test)[,2]
table(predtest>0.5,test$trial)
pd = prediction(predtest,test$trial)
predtest = predict(trialCART,newdata=test)[,2]
table(predtest>0.5,test$trial)
pd = prediction(predtest,test$trial)
performance(pd,'auc')@y.values
emails = read.csv("Downloads/emails.csv")
sum(emails$spam)
head(email$text)
head(emails$text)
which.max(nchar(emails$text))
which.max(nchar(emails$text))
which.max(nchar(emails$text,type='byte'))
nchar(emails$text[1])
emails$text[1]
emails = read.csv("Downloads/emails.csv",stringsAsFactors =FALSE)
sum(emails$spam)
which.max(nchar(emails$text,type='byte'))
which.min(nchar(emails$text,type='byte'))
max(nchar(emails$text))
library(tm)
library(rpart)
library(rpart.plot)
library(ROCR)
library(caTools)
corpus.make.dtm = function(src){
corpus = Corpus(VectorSource(src))
corpus = tm_map(corpus,tolower)
corpus = tm_map(corpus,removePunctuation)
corpus = tm_map(corpus,removeWords,stopwords('english'))
corpus = tm_map(corpus,stemDocument)
dtm = DocumentTermMatrix(corpus)
}
dtm = corpus.make.dtm(emails$text)
dtm
spdtm = removeSparseTerms(dtm)
spdtm = removeSparseTerms(dtm,0.95)
spdtm
emailsSparse = as.data.frame(as.matrix(spdtm))
colnames(emailsSparse) = make.names(emailsSparse)
colnames(emailsSparse)
View(emailsSparse)
emailsSparse = as.data.frame(as.matrix(spdtm))
View(emailsSparse)
colnames(emailsSparse) = make.names(colnames(emailsSparse))
colnames(emailsSparse)
which.max(colSums(emailsSparse))
freqs = colSums(emailsSparse)
emailsSparse$spam = emails$spam
freqs = colSums(subset(emailsSparse,spam==0))
sum(freqs>=5000)
str(freqs)
freqs = colSums(subset(emailsSparse,spam==1))
sum(freqs>=1000)
freqs
source('~/.active-rstudio-document')
sum(freqs>=1000)
sum(freqs>1000)
emailsSparse$spam = as.factor(emailsSparse$spam)
dtm = NA
spdtm = NA
freqs = NA
emailsSparse$spam = as.factor(emailsSparse$spam)
emails = NA
set.seed(123)
spt = sample.split(emailsSparse$spam)
set.seed(123)
spt = sample.split(emailsSparse$spam)
library(tm)
library(rpart)
library(rpart.plot)
library(ROCR)
library(caTools)
set.seed(123)
spt = sample.split(emailsSparse$spam)
train = emailsSparse[spt,]
test = emailsSparse[!spt,]
source('~/.active-rstudio-document')
warnings()
Corpus(dtm)
Corpus(VectorSource(dtm))
corpus = tm_map(corpus,tolower)
corpus = tm_map(corpus,removePunctuation)
corpus = tm_map(corpus,removeWords,stopwords('english'))
corpus = tm_map(corpus,stemDocument)
library(tm)
library(rpart)
library(rpart.plot)
library(ROCR)
library(caTools)
library(randomForest)
library(slam)
library(RTextTools)
corpus = tm_map(corpus,tolower)
corpus = tm_map(corpus,removePunctuation)
corpus = tm_map(corpus,removeWords,stopwords('english'))
corpus = tm_map(corpus,stemDocument)
dtm2gram = create_matrix(as.character(corpus), ngramLength=2)
dtm2gram
spdtm2gram = removeSparseTerms(dtm2gram,sparse=0.95)
spdtm2gram
spdtm
emailSparse2gram =  as.data.frame(as.matrix(spdtm2gram))
colnames(emailSparse2gram) = make.names(colnames(emailSparse2gram))
emailsCombined = cbind(emailsSparse,emailSparse2gram)
train3 = emailsCombined[spt,]
test3 = emailsCombined[!spt,]
train3 = emailsCombined[spt,]
test3 = emailsCombined[!spt,]
spamCARTcombined = rpart(spam ~ . ,data= train3)
set.seed(123)
spamRFcombined = randomForest(spam ~ . ,data = train3)
prp(spamCARTcombined)
View(emailSparse2gram)
colnames(emailSparse2gram)
prp(spamCARTcombined,varlen=0)
table(predict(spamCARTcombined,newdata=test),test$spam)
table(predict(spamCARTcombined,newdata=test3),test3$spam)
table(predict(spamCARTcombined,newdata=test3)[,2],test3$spam)
table(predict(spamCARTcombined,newdata=test3)[,2]>0.5,test3$spam)
(1233+374) / nrow(test3)
performance(prediction(predict(spamCARTcombined,newdata=test3)[,2],test3$spam),'auc')@y.values
table(predict(spamRFcombined,newdata=test3,type='prob')[,2]>0.5,test3$spam)
performance(prediction(predict(spamRFcombined,newdata=test3,type='prob')[,2],test3$spam),'auc')@y.values
(1296+384) / nrow(test2)
source('~/w5_q1.R')
source('~/w5_q1.R', echo=TRUE)
prp(CARTmodel)
install.packages('pamr shiny')
install.packages(c('pamr','shiny'))
install.packages(c('pamr','shiny'))
install.packages(c('caret'))
install.packages('KernSmooth')
library(KernSmooth)
library(XML)
doc = xmlTreeParse("getdata_data_restaurants.xml",useInternalNodes=T)
zipcodesxpathSApply(doc,'//response//row//row//zipcode',xmlValue)
zipcodes=xpathSApply(doc,'//response//row//row//zipcode',xmlValue)
sum(zipcodes=='21231')
DT = read.csv('getdata_data_ss06pid_2.csv')
tapply(DT$pwgtp15,DT$SEX,mean)
mean(DT$pwgtp15,by=DT$SEX)
library(data.table)
DT =fread('getdata_data_ss06pid_2.csv')
View(DT)
DT[,mean(pwgtp15),by=SEX]
mean(DT$pwgtp15,by=DT$SEX)
anova()
anova
76+ 72*0.35 + 30*0.43
dailykos = read.csv('dailykos.csv')
View(dailykos)
colnames(dailykos)
colnames(dailykos)[1:10]
dis = dist(dailykos[2:ncol(dailykos)],method='euclidean')
dailykos.clust = hclust(dis,method='ward')
dailykos.clust = hclust(dis,method='ward.D')
plot(dailykos.clust)
dailykos.cut = cutree(dailykos.clust,k=7)
sum(dailykos.cut==3)
table(dailykos.cut)
clusters = list()
clusters[1]=1
for(i in 1:7){
clusters[i] = dailykos[dailykos.cut==i,]
}
dailykos[dailykos.cut==1,]
for(i in 1:7){
clusters[[i]] = dailykos[dailykos.cut==i,]
}
clusters[[1]]
tail(sort(colMeans(clusters[[1]][-1])))
tail(sort(colMeans(clusters[[2]][-1])))
for(i in 1:7){
}
tail(sort(colMeans(clusters[[i]][-1])))
for(i in 1:7){
print(tail(sort(colMeans(clusters[[i]][-1]))))
}
for(i in 1:7){
print(sort(colMeans(clusters[[i]][-1]),decreasing=TRUE)[1:5])
}
for(i in 1:7){
print(i)
print(sort(colMeans(clusters[[i]][-1]),decreasing=TRUE)[1:5])
}
dailykos[1:10]
dailykos[1:10][-1]
dailykos[1:10,1:10][-1]
set.seed(1000)
set.seed(1000)
dailykos.kmeans = kmeans(dailykos[-1],centers=7)
clusters.kmeans = list()
for(i in 1:7){
clusters.kmeans[[i]]= dailykos[dailykos.kmeans$cluster==i,]
}
table(clusters.kmeans$cluster)
table(clusters.kmeans)
table(dailykos.kmeans$cluster)
print(sort(colMeans(clusters.kmeans[[i]][-1]),decreasing=TRUE)[1:5])
for(i in 1:7){
print(i)
print(sort(colMeans(clusters.kmeans[[i]][-1]),decreasing=TRUE)[1:5])
}
for(i in 1:7){
print(sort(colMeans(clusters[[i]][-1]),decreasing=TRUE)[1:5])
print(i)
}
table(dailykos.cut,dailykos.kmeans$cluster)
table(dailykos.kmeans$cluster)
airlines = read.csv('AirlinesCluster.csv')
means(airlines)
mean(airlines)
colMeans(airlines)
min(airlines)
sapply(airlines,2)
sapply(airlines,max)
library(caret)
install.packages('caret')
library(caret)
preproc = preProcess(airlines)
airlinesNorm = predict(preproc, airlines)
sapply(airlinesNorm,min)
sapply(airlinesNorm,max)
airline.dist = dist(airlinesNorm,method='euclidian')
airline.hclust = hclust(airline.dist,method='ward.D')
plot(airline.hclust)
airline.cut = cutree(airline.hclust,k=7)
airline.cut = cutree(airline.hclust,k=5)
table(airline.cut)
tapply(airline,airline.cut,mean)
tapply(airlines,airline.cut,mean)
tapply(airlines$Balance,airline.cut,mean)
for(i in 1:7){
print(colnames(airlines)[i])
print(tapply(airlines$[,i],airline.cut,mean))
}
for(i in 1:7){
print(colnames(airlines)[i])
print(tapply(airlines[,i],airline.cut,mean))
}
airline.kmeans = kmeans(airlinesNorm,centers=5,iter.max=1000)
table(airline.kmeans$cluster)
re = read.csv('reimbursement.csv')
View(re)
re2 = re[-1-2]
re2 = re[-c(1,2)]
re2 = re[-c(1,13,14)]
View(re2)
rowSums(re2)[1:10]
rowSums(re2)
rowSums(re2!=0)
sum(rowSums(re2)!=0)
View(re)
sum(rowSums(re2)!=0) / nrow(re2)
cor(re)
max(cor(re))
cor(re)
tmp=cor(re)
tmp[i,i]=0
for(i in 1:14){
tmp[i,i]=0
}
max(tmp)
hist(re$reimbursement2009)
View(re)
re$reimbursement2008 = log(re$reimbursement2008)
re$reimbursement2009 = log(re$reimbursement2009)
hist(re$reimbursement2009)
View(re)
source('~/w7_q3.R', echo=TRUE)
View(re)
sum(re$reimbursement2009==0)
sum(re$reimbursement2009==0)/nrow(re)
set.seed(144)
spl = sample(1:nrow(claims), size=0.7*nrow(claims))
train = re[spl,]
test = re[-spl,]
set.seed(144)
spl = sample(1:nrow(claims), size=0.7*nrow(claims))
set.seed(144)
spl = sample(1:nrow(re), size=0.7*nrow(re))
train = re[spl,]
test = re[-spl,]
lm.re = lm(reimbursement2009 ~ .,data=train)
summary(lm.re)
pred = predict(lm.re,newdata=test)
sqrt(mean((pred-re$reimbursement2009)^2))
sqrt(mean((pred-test$reimbursement2009)^2))
sqrt(mean(( mean(train$reimbursement2009)-test$reimbursement2009)^2))
sqrt(mean(( test$reimbursement2008-test$reimbursement2009)^2))
train.limited = train
train.limited$reimbursement2009 = NULL
test.limited = test
test.limited$reimbursement2009 = NULL
library(caret)
preproc = preProcess(train.limited)
train.norm = predict(preproc, train.limited)
test.norm = predict(preproc, test.limited)
sapply(train.norm,mean)
sapply(test.norm,mean)
set.seed(144)
km = kmeans(train,3)
km = kmeans(train.norm,3)
sapply(train.norm,mean)
km$centers
set.seed(144)
km = kmeans(train.norm,3)
sapply(train.norm,mean)
km$centers
install.packages('flexclust')
library(flexclust)
km.kcca = as.kcca(km, train.norm)
cluster.train = predict(km.kcca)
cluster.test = predict(km.kcca, newdata=test.norm)
table(cluster.test)
tapply(train$reimbursement2009,cluster.train,mean)
for(i in 1:3){
trains[[i]] = train[cluster.train==i,]
}
trains = list()
for(i in 1:3){
trains[[i]] = train[cluster.train==i,]
}
lms = list()
lms = list()
for(i in 1:3){
lms[i] = lm(reimbursement2009 ~ . ,data=trains[[i]])
}
lms = list()
for(i in 1:3){
lms[[i]] = lm(reimbursement2009 ~ . ,data=trains[[i]])
}
summary(lms[[1]])
summary(lms[[2]])
summary(lms[[3]])
for(i in 1:3){
pred.test[[i]]=predict(lm[[i]],newdata=test)
}
predict(lm[[1]])
lm[[1]]
for(i in 1:3){
pred.test[[i]]=predict(lms[[i]],newdata=test)
}
pred.test = list()
for(i in 1:3){
pred.test[[i]]=predict(lms[[i]],newdata=test)
}
pred.test
apply(pred.test,mean)
apply(pred.test,FUN=mean)
apply(pred.test,1,FUN=mean)
lapply(pred.test,FUN=mean)
lapply(pred.test,FUN=mean)
lapply(pred.test,FUN=function(pred){ sqrt(mean((pred-test$reimbursement2009)^2))})
for(i in 1:3){
pred.test[[i]]=predict(lms[[i]],newdata=test[cluster.test==i,])
}
lapply(pred.test,FUN=function(pred){ sqrt(mean((pred-test[cluster.test==i,]$reimbursement2009)^2))})
lapply(pred.test,FUN=mean)
library(plyr)
ldply(pred.test)
ldply(pred.test)[-1]
ldply(pred.test)[,-1]
ldply(pred.test)[-1,]
ldply(pred.test,.fun=mean)
ldply(pred.test)
all.predictions = c(pred.test[[1]], pred.test[[2]], pred.test[[3]])
all.outcomes = c(test[cluster.test==1,]$reimbursement2009, test[cluster.test==2,]$reimbursement2009, test[cluster.test==3,]$reimbursement2009)
sqrt(mean((all.predictions-all.outcomes)^2))
View(re)
mean(test$arthritis)
mean(test.norm$arthritis)
setwd("E:/repos/computing_for_data_analysis/PA2")
source('complete.R')
source('corr.R.R')
source('corr.R')
source('getmonitor.R')
source('pollutantmean.R')
pollutantmean('specdata','sulfate')
source('E:/repos/computing_for_data_analysis/PA2/pollutantmean.R', echo=TRUE)
pollutantmean('specdata','sulfate')
source('E:/repos/computing_for_data_analysis/PA2/pollutantmean.R', echo=TRUE)
source('E:/repos/computing_for_data_analysis/PA2/pollutantmean.R', echo=TRUE)
pollutantmean('specdata','sulfate')
source('E:/repos/computing_for_data_analysis/PA2/pollutantmean.R', echo=TRUE)
pollutantmean('specdata','sulfate')
data = sapply(1:332,FUN=function(id){getmonitor(id,'specdata')})
data.df =as.data.frame(data)
View(data.df)
data.df =as.data.frame(t(data))
View(data.df)
data = lapply(1:332,FUN=function(id){getmonitor(id,'specdata')})
data.ldply = ldply(data)
View(data.ldply)
head[data[[1]]]
head(data[[1]])
pollutantmean('specdata','sulfate')
data.ldply[1:10,'sulfate']
mean(data[,'sulfate'],na.rm=T)
mean(data[,1],na.rm=T)
mean(data[,2],na.rm=T)
mean(data.ldply[,'sulfate'],na.rm=T)
data = lapply(1:332,FUN=function(id){getmonitor(id,'specdata')})
data = ldply(data)
pollutantmean('specdata','sulfate')
source('E:/repos/computing_for_data_analysis/PA2/pollutantmean.R', echo=TRUE)
pollutantmean('specdata','sulfate')
source('~/.active-rstudio-document', echo=TRUE)
source('E:/repos/computing_for_data_analysis/PA2/pollutantmean.R', echo=TRUE)
pollutantmean('specdata','sulfate')
source('E:/repos/computing_for_data_analysis/PA2/pollutantmean.R', echo=TRUE)
pollutantmean('specdata','sulfate')
apply(1:20,runif)
apply(1:20,FUN=runif)
lapply(1:20,FUN=runif)
lapply(1:20,FUN=runif)
rbind(data)
data.rb =rbind(data)
ldply
llply
str(apply)
apply(1:10,1,runif)
matrix(10,10)
matrix(1:10,10)
matrix(1:10,1:10)
matrix(data=1,nrow=10,ncol=10)
matrix(data=1:100,nrow=10,ncol=10)
mat = matrix(data=1:100,nrow=10,ncol=10)
apply(mat,2,sum)
apply(mat,1,sum)
apply
mat
lapply(1:10,FUN=runif)
split
as.list(rnorm(10))
x <-as.list(rnorm(10))
lapply(x,FUN=function(x){x+1})
gl(5,10)
lev=gl(5,10)
interaction(lev,lev,lev)
